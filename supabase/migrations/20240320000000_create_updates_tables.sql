-- Create updates table
CREATE TABLE updates (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title TEXT NOT NULL,
    description TEXT NOT NULL,
    status TEXT NOT NULL CHECK (status IN ('new', 'upcoming', 'completed')),
    date TIMESTAMP WITH TIME ZONE NOT NULL,
    category TEXT NOT NULL,
    full_content TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create documents table
CREATE TABLE documents (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    update_id BIGINT REFERENCES updates(id) ON DELETE CASCADE,
    name TEXT NOT NULL,
    type TEXT NOT NULL CHECK (type IN ('upload', 'download', 'sign')),
    status TEXT NOT NULL CHECK (status IN ('pending', 'completed', 'required')),
    file_path TEXT,
    signed_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create RLS policies for updates
ALTER TABLE updates ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Updates are viewable by authenticated users"
    ON updates FOR SELECT
    TO authenticated
    USING (true);

CREATE POLICY "Updates can be created by service role"
    ON updates FOR INSERT
    TO service_role
    WITH CHECK (true);

CREATE POLICY "Updates can be updated by service role"
    ON updates FOR UPDATE
    TO service_role
    USING (true);

-- Create RLS policies for documents
ALTER TABLE documents ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Documents are viewable by authenticated users"
    ON documents FOR SELECT
    TO authenticated
    USING (true);

CREATE POLICY "Documents can be created by service role"
    ON documents FOR INSERT
    TO service_role
    WITH CHECK (true);

CREATE POLICY "Documents can be updated by service role"
    ON documents FOR UPDATE
    TO service_role
    USING (true);

-- Create function to update updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create triggers for updated_at
CREATE TRIGGER update_updates_updated_at
    BEFORE UPDATE ON updates
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_documents_updated_at
    BEFORE UPDATE ON documents
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column(); 